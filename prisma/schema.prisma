generator client {
  provider = "prisma-client-js"
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withMiddleware = false
  withShield     = false
  contextPath    = "../../../../server/trpc/context"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/dev.db"
}

model User {
  id       String    @id @default(cuid())
  name     String?
  password String?
  projects Project[]
}

model Project {
  id          String       @id @default(cuid())
  name        String
  description String?
  admins      User[]
  devices     Device[]
  mqttBrokers MqttBroker[]
}

model Device {
  id          String    @id @default(cuid())
  name        String
  description String?
  projects    Project[]
  /// @deprecated use mqttTags or similar
  tags        Tag[]
  mqttTags    MqttTag[]
}

// depreciated, replaced by MqttTag (future proof for others like OPCUATag etc.)
model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?
  devices     Device  @relation(fields: [deviceId], references: [id])
  deviceId    String
  /// HTTP, MQTT OR OPC_UA
  type        String
}

model MqttBroker {
  id          String    @id @default(cuid())
  name        String
  description String?
  url         String
  username    String?
  password    String?
  tags        MqttTag[]
  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MqttTag {
  id           String      @id @default(cuid())
  name         String
  description  String?
  topic        String
  mqttBroker   MqttBroker? @relation(fields: [mqttBrokerId], references: [id])
  mqttBrokerId String?
  device       Device?     @relation(fields: [deviceId], references: [id])
  deviceId     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
